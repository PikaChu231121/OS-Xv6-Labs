answers:
> Which registers contain arguments to functions? For example, which register holds 13 in main's call to `printf`?

答：通用寄存器a0-a7可存储函数的参数；通用寄存器a2存储了13。


> Where is the call to function `f` in the assembly code for main? Where is the call to `g`? (Hint: the compiler may inline functions.)

答：汇编代码没有调用`f`和`g`函数，`g`内联到了`f(x)`中，`f`内联到了`main`中。


> At what address is the function `printf` located?

答：`printf`函数位于地址`0x642`。


> What value is in the register `ra` just after the `jalr` to `printf` in main?

答：`jalr`指令执行完毕后，`ra`的值为`0x38`。


> Run the following code.
>
> ```c
> unsigned int i = 0x00646c72;
> printf("H%x Wo%s", 57616, &i);
> ```
>
> What is the output? [Here's an ASCII table](https://www.asciitable.com/) that maps bytes to characters.
>
> The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set `i` to in order to yield the same output? Would you need to change `57616` to a different value?
>
> [Here's a description of little- and big-endian](http://www.webopedia.com/TERM/b/big_endian.html) and [a more whimsical description](https://www.rfc-editor.org/ien/ien137.txt).

答：上述代码的输出为`HE110 World`。如果在大端序，`i`的值应为`0x00726c64`，才能保持输出不变。不需要改变`57616`的值。


> In the following code, what is going to be printed after `'y='`? (note: the answer is not a specific value.) Why does this happen?
>
> ```c
> printf("x=%d y=%d", 3);
> ```

答：`y=`后输出的值是一个不确定的随机值。因为`printf`函数少传了一个参数，但仍然会从寄存器中读取数值，因此其会从其会从寄存器中读出一个不确定的值。